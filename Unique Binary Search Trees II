/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> buildTree(int start, int end) {
        
        vector<TreeNode *> result;
        if (start > end) {
            result.push_back(NULL);
        }
       
        for (int i = start; i <= end; i++) {
            vector<TreeNode*> left = buildTree(start, i-1);
            vector<TreeNode*> right = buildTree(i+1, end);
            for (int m = 0; m < left.size(); m++) {
                for (int n = 0; n < right.size(); n++) {
                    TreeNode *root = new TreeNode(i);
                    root->left = left[m];
                    root->right = right[n];
                    result.push_back(root);
                }
            }
        }
        return result;
    }
    vector<TreeNode *> generateTrees(int n) {
        
       return buildTree(1, n);
    }
};
