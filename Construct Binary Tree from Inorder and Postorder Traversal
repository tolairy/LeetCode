/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

   TreeNode *getTree(vector<int> &inorder, int instart, int inend, vector<int> &postorder, int poststart, int postend) {
      
       
       int inorder_root;
        for (int i = instart; i <= inend; i++) {
            if (inorder[i] == postorder[postend]) {
                inorder_root = i;
                break;
            }
        }
        TreeNode *root = new TreeNode(postorder[postend]);
        
        if (inorder_root > instart) {
            root->left = getTree(inorder, instart, inorder_root - 1, postorder, poststart, poststart +  inorder_root - 1 - instart);
        }else {
            root->left = NULL;
        }
        
        if (inorder_root < inend) {
            root->right = getTree(inorder, inorder_root + 1, inend, postorder, poststart + inorder_root - instart, postend-1);
        }else {
            root->right = NULL;
        }
        
        return root;
        
   }
    
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        
        int size = inorder.size();
        if (size == 0) {
            return NULL;
        }
        
        
        return getTree(inorder, 0, size - 1, postorder, 0, size - 1);
        
    }
};
